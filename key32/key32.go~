// Package key32 provides utilities to shard-encode a 32-bit key by extracting
// a run of bits, reversing them, and prepending them into the high bits.
package key32

// ShardKey32 wraps the original 32-bit key.
type ShardKey32 uint32

// Shard extracts the size-bit field at [offset..offset+size) from the original key.
func (k ShardKey32) Shard(offset, size int) uint32 {
	return reverseBits((uint32(k)>>offset)&((1<<size)-1), size)
}

// MSBs returns the bits to the left of that field, shifted down to bit-0.
func (k ShardKey32) MSBs(offset, size int) uint32 {
	return uint32(k) >> (offset + size)
}

// LSBs returns the bits to the right of that field.
func (k ShardKey32) LSBs(offset, size int) uint32 {
	return uint32(k) & ((1 << offset) - 1)
}

// Encode shuffles the offset..offset+size bits by reversing them and
// prepending into the top `size` bits of the output word.
func (k ShardKey32) Encode(offset, size int) uint32 {
	// 1) extract the field
	shard := k.Shard(offset, size)

	// 2) grab the untouched left/right chunks
	left := k.MSBs(offset, size)
	right := k.LSBs(offset, size)
	// 3) reassemble: [reversed | left | right]
	return (shard << (32 - size)) |
		(left << offset) |
		right
}

// Decode inverts Encode: given an encoded word, plus the same offset/size,
// it returns the original ShardKey32.
func Decode(encoded uint32, offset, size int) ShardKey32 {
	mask := (uint32(1) << size) - 1

	// 1) pull the reversed bits back out of the top
	reversed := (encoded >> (32 - size)) & mask
	// 2) unreversed them to recover the original field
	maskBits := reverseBits(reversed, size)

	// 3) split the rest
	left := (encoded >> offset) & ((1 << (32 - size - offset)) - 1)
	right := encoded & ((1 << offset) - 1)

	// 4) reassemble original
	orig := (left << (offset + size)) |
		(maskBits << offset) |
		right

	return ShardKey32(orig)
}

// reverseBits reverses the low `bitCount` bits of val.
func reverseBits(val uint32, bitCount int) uint32 {
	var out uint32
	for i := 0; i < bitCount; i++ {
		out <<= 1
		out |= (val >> i) & 1
	}
	return out
}
