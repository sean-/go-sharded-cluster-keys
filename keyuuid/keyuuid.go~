// Package keyuuid provides a thin wrapper around google/uuid.UUID
// with constructors for “plain” UUIDs, UUIDv7, and ULID byte arrays.
package keyuuid

import (
	"encoding/hex"
	"fmt"

	"github.com/google/uuid"
	"github.com/oklog/ulid/v2"
)

// Key wraps a standard UUID.
type Key struct {
	u uuid.UUID
}

// New wraps any UUID (v1–v5, v7, etc.) without further validation.
func New(u uuid.UUID) Key {
	return Key{u}
}

// NewFromUUIDv7 accepts a UUIDv7 and returns a Key, or error if not version 7.
func NewFromUUIDv7(u uuid.UUID) (Key, error) {
	if u.Version() != 7 {
		return Key{}, fmt.Errorf("keyuuid: provided UUID is version %d, want version 7", u.Version())
	}
	return Key{u}, nil
}

// NewFromULID accepts a ULID’s 16-byte array and returns the corresponding Key.
// Internally we just reinterpret the bytes as a UUID (they’re the same 128-bit layout).
func NewFromULID(b [16]byte) (Key, error) {
	// ULID is also 16 bytes; we just round-trip through the ULID parser to validate.
	u, err := ulid.Parse(hex.EncodeToString(b[:]))
	if err != nil {
		return Key{}, fmt.Errorf("keyuuid: invalid ULID bytes: %w", err)
	}
	// ulid.Parse gives us an ulid.ULID, which is exactly [16]byte under the hood,
	// so we can cast to uuid.UUID safely.
	var out uuid.UUID
	copy(out[:], u[:])
	return Key{out}, nil
}

// UUID returns the standard google/uuid.UUID.
func (k Key) UUID() uuid.UUID {
	return k.u
}

// Bytes returns the 16‐byte big‐endian representation.
func (k Key) Bytes() [16]byte {
	return k.u
}

// String returns the canonical dash‐form string.
func (k Key) String() string {
	return k.u.String()
}
