package keyuuid

import (
	"encoding/hex"
	"testing"

	"github.com/google/uuid"
	"github.com/oklog/ulid/v2"
	"github.com/stretchr/testify/require"
)

func TestNewWrapsAnyUUID(t *testing.T) {
	u1 := uuid.MustParse("6ba7b810-9dad-11d1-80b4-00c04fd430c8") // v1
	k1 := New(u1)
	require.Equal(t, u1, k1.UUID())

	u5 := uuid.MustParse("3d813cbb-47fb-32ba-91df-831e1593ac29") // v3
	k5 := New(u5)
	require.Equal(t, u5, k5.UUID())
}

func TestNewFromUUIDv7(t *testing.T) {
	// a real v7 from oklog/ulid for testing:
	u7 := uuid.MustParse("018f14e0-8f0a-7def-91b4-f0ecb69f5f01")
	k7, err := NewFromUUIDv7(u7)
	require.NoError(t, err)
	require.Equal(t, u7, k7.UUID())

	// wrong version
	u1 := uuid.MustParse("6ba7b810-9dad-11d1-80b4-00c04fd430c8")
	_, err = NewFromUUIDv7(u1)
	require.Error(t, err)
}

func TestNewFromULID(t *testing.T) {
	// generate a ULID
	u, err := ulid.New(ulid.Now(), nil)
	require.NoError(t, err)
	var b [16]byte
	copy(b[:], u[:])

	k, err := NewFromULID(b)
	require.NoError(t, err)
	// round-trip back to ULID
	got := ulid.ULID(k.UUID())
	require.Equal(t, u, got)
}

func TestBytesAndString(t *testing.T) {
	u := uuid.MustParse("abcdefab-cdef-abcd-efab-cdefabcdefab")
	k := New(u)
	b := k.Bytes()
	// hex encode should match original
	require.Equal(t, "abcdefabcdefabcdefabcdefabcdefab", hex.EncodeToString(b[:]))
	require.Equal(t, u.String(), k.String())
}
